#!/usr/bin/env bash

set -e

echo "Setting up dev environment..."

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until `bootstrap` has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

WORKDIR=$(pwd)

# Check for internet connection
dig +short +time=1 +tries=1 github.com >/dev/null 2>&1 || OFFLINE='true'

# Determine system type
if [[ $(uname) == "Darwin" ]]; then MACOS='true'; fi
if [[ $(uname -m) == "arm64" ]]; then APPLESILICON='true'; fi

if [[ ${OFFLINE} ]]; then
  echo "Running in offline mode..."
fi

if [[ ! ${OFFLINE} ]]; then
  if [[ $(uname) == "Darwin" ]]; then
      echo "MacOS Detected"
      if ! command -v brew >/dev/null 2>&1; then
          echo "Installing Homebrew..."
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" </dev/null
          if [[ ${APPLE_SILICON} ]]; then
            echo "Looks like you have Apple Silicon, installing amd64 Homebrew..."
            arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" </dev/null
	  fi
      else
          echo "Homebrew already installed, updating..."
          brew update
          if [[ ${APPLE_SILICON} ]]; then
            echo "Looks like you have Apple Silicon, updating amd64 Homebrew..."
            arch -x86_64 /usr/local/bin/brew update
	  fi
      fi
      echo "Installing packages and apps with Homebrew, Cask and mas..."
      while read tap; do echo "Tapping $tap..."; brew tap $tap; arch -x86_64 /usr/local/bin/brew tap $tap; done < homebrew/tap.txt
      while read formula; do echo "Installing $formula..."; brew install $formula || arch -x86_64 /usr/local/bin/brew install $formula; done < homebrew/formula.txt
      while read cask; do echo "Installing $cask..."; brew install $cask; done < homebrew/cask.txt
      while read app; do echo "Installing $app..."; mas install $app; done < homebrew/mas.txt
  fi
fi

## Shell (zsh) configuration ####
Install Oh My Zsh
if [[ ! $OFFLINE ]]; then
  if [[ ! -d $HOME/.oh-my-zsh ]]; then
      # Install Oh My Zsh
      echo "Installing Oh My Zsh..."
      RUNZSH=no CHSH=no sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" --unattended
  else
      # Use the inbuilt mechanism to update Oh My Zsh
      echo "Oh My Zsh already installed, updating..."
      cd $HOME/.oh-my-zsh
      git pull
      cd $WORKDIR
  fi
fi

# Install Powerlevel10k zsh theme
if [[ ! $OFFLINE ]]; then
  if [[ ! -d $HOME/.oh-my-zsh/custom/themes/powerlevel10k ]]; then
      echo "Installing Powerlevel10k zsh theme..."
      git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $HOME/.oh-my-zsh/custom/themes/powerlevel10k
  else
      echo "Powerlevel10k already installed, updating..."
      cd $HOME/.oh-my-zsh/custom/themes/powerlevel10k
      git pull
      cd $WORKDIR
  fi
fi

# Install additional zsh plugins not included with Oh My Zsh
if [[ ! $OFFLINE ]]; then
  for r in zsh-autosuggestions zsh-syntax-highlighting; do
      if [[ ! -d $HOME/.oh-my-zsh/custom/plugins/$r ]]; then
          echo "Installing $r..."
          git clone --depth=1 https://github.com/zsh-users/$r $HOME/.oh-my-zsh/custom/plugins/$r
      else
          echo "$r already installed, updating..."
          cd $HOME/.oh-my-zsh/custom/plugins/$r
          git pull
          cd $WORKDIR
      fi
  done
fi

# # Link custom .zsh files to Oh My Zsh custom folder
echo "Linking custom .zsh files..."
for f in custom/*; do
    ln -sf $WORKDIR/$f $HOME/.oh-my-zsh/$f
done

# Link ssh config
echo "Linking ssh config..."
mkdir -p $HOME/.ssh
ln -sf $WORKDIR/ssh/config $HOME/.ssh/config
mkdir -p $HOME/.ssh/config.d

# Link $HOME dotfiles
echo "Linking files to home directory..."
for f in *; do
  if [[ ! $f == "README.md" ]] && [[ ! $f == "bootstrap" ]] && [[ ! -d $f ]]; then
    ln -sf $WORKDIR/$f $HOME/.$f
  fi
done

# Create this file to suppress error from z on first 'cd'
if [[ ! -f $HOME/.z ]]; then
  touch $HOME/.z
fi

# Install asdf version manager plugins
if [[ ! $OFFLINE ]]; then
  for p in golang kubectl nodejs python ruby yarn; do
    if [[ ! -d $HOME/.asdf/plugins/$p ]]; then
      echo "Installing asdf plugin $p..."
      asdf plugin add $p
      if [[ $p == "nodejs" ]]; then
        bash ~/.asdf/plugins/nodejs/bin/import-release-team-keyring
      fi
    else
      echo "asdf plugin $p already installed, updating..."
      asdf plugin update $p
    fi
  done
fi

# Restore configs with mackup
echo "Linking mackup config..."
if [[ ! -d $HOME/.mackup ]]; then
  mkdir -p $HOME/.mackup
fi
for f in mackup/*; do
  ln -sf $WORKDIR/$f $HOME/.$f
done
if [[ ! $OFFLINE ]]; then
  echo "Restoring files with mackup..."
  mackup restore -f
fi

# Change the users default shell
if [[ $SHELL != "$(brew --prefix)/bin/zsh" ]]; then
  echo "Changing the default shell..."
  sudo chsh -s $(brew --prefix)/bin/zsh $USER
fi

echo "---> Bootstrap complete, happy hacking!"
